/*
 * ytelapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package YtelAPIClient

import(
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/configuration_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/usage_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/subaccount_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/account_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/email_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/recording_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/transcription_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/conference_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/phonenumber_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/carrier_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/dedicatedshortcode_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/sharedshortcode_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/sms_pkg"
	"github.com/Ytel-Inc/YtelAPI-Go/src/ytelapi_lib/voice_pkg"
)
/*
 * Client structure as interface implementation
 */
type YTELAPI_IMPL struct {
     usage usage_pkg.USAGE
     subaccount subaccount_pkg.SUBACCOUNT
     account account_pkg.ACCOUNT
     email email_pkg.EMAIL
     recording recording_pkg.RECORDING
     transcription transcription_pkg.TRANSCRIPTION
     conference conference_pkg.CONFERENCE
     phonenumber phonenumber_pkg.PHONENUMBER
     carrier carrier_pkg.CARRIER
     dedicatedshortcode dedicatedshortcode_pkg.DEDICATEDSHORTCODE
     sharedshortcode sharedshortcode_pkg.SHAREDSHORTCODE
     sms sms_pkg.SMS
     voice voice_pkg.VOICE
     config  configuration_pkg.CONFIGURATION
}

/**
     * Access to Configuration
     * @return Returns the Configuration instance
*/
func (me *YTELAPI_IMPL) Configuration() configuration_pkg.CONFIGURATION {
    return me.config
}
/**
     * Access to Usage controller
     * @return Returns the Usage() instance
*/
func (me * YTELAPI_IMPL) Usage() usage_pkg.USAGE {
    if(me.usage) == nil {
        me.usage = usage_pkg.NewUSAGE(me.config)
    }
    return me.usage
}
/**
     * Access to SubAccount controller
     * @return Returns the SubAccount() instance
*/
func (me * YTELAPI_IMPL) SubAccount() subaccount_pkg.SUBACCOUNT {
    if(me.subaccount) == nil {
        me.subaccount = subaccount_pkg.NewSUBACCOUNT(me.config)
    }
    return me.subaccount
}
/**
     * Access to Account controller
     * @return Returns the Account() instance
*/
func (me * YTELAPI_IMPL) Account() account_pkg.ACCOUNT {
    if(me.account) == nil {
        me.account = account_pkg.NewACCOUNT(me.config)
    }
    return me.account
}
/**
     * Access to Email controller
     * @return Returns the Email() instance
*/
func (me * YTELAPI_IMPL) Email() email_pkg.EMAIL {
    if(me.email) == nil {
        me.email = email_pkg.NewEMAIL(me.config)
    }
    return me.email
}
/**
     * Access to Recording controller
     * @return Returns the Recording() instance
*/
func (me * YTELAPI_IMPL) Recording() recording_pkg.RECORDING {
    if(me.recording) == nil {
        me.recording = recording_pkg.NewRECORDING(me.config)
    }
    return me.recording
}
/**
     * Access to Transcription controller
     * @return Returns the Transcription() instance
*/
func (me * YTELAPI_IMPL) Transcription() transcription_pkg.TRANSCRIPTION {
    if(me.transcription) == nil {
        me.transcription = transcription_pkg.NewTRANSCRIPTION(me.config)
    }
    return me.transcription
}
/**
     * Access to Conference controller
     * @return Returns the Conference() instance
*/
func (me * YTELAPI_IMPL) Conference() conference_pkg.CONFERENCE {
    if(me.conference) == nil {
        me.conference = conference_pkg.NewCONFERENCE(me.config)
    }
    return me.conference
}
/**
     * Access to PhoneNumber controller
     * @return Returns the PhoneNumber() instance
*/
func (me * YTELAPI_IMPL) PhoneNumber() phonenumber_pkg.PHONENUMBER {
    if(me.phonenumber) == nil {
        me.phonenumber = phonenumber_pkg.NewPHONENUMBER(me.config)
    }
    return me.phonenumber
}
/**
     * Access to Carrier controller
     * @return Returns the Carrier() instance
*/
func (me * YTELAPI_IMPL) Carrier() carrier_pkg.CARRIER {
    if(me.carrier) == nil {
        me.carrier = carrier_pkg.NewCARRIER(me.config)
    }
    return me.carrier
}
/**
     * Access to DedicatedShortCode controller
     * @return Returns the DedicatedShortCode() instance
*/
func (me * YTELAPI_IMPL) DedicatedShortCode() dedicatedshortcode_pkg.DEDICATEDSHORTCODE {
    if(me.dedicatedshortcode) == nil {
        me.dedicatedshortcode = dedicatedshortcode_pkg.NewDEDICATEDSHORTCODE(me.config)
    }
    return me.dedicatedshortcode
}
/**
     * Access to SharedShortCode controller
     * @return Returns the SharedShortCode() instance
*/
func (me * YTELAPI_IMPL) SharedShortCode() sharedshortcode_pkg.SHAREDSHORTCODE {
    if(me.sharedshortcode) == nil {
        me.sharedshortcode = sharedshortcode_pkg.NewSHAREDSHORTCODE(me.config)
    }
    return me.sharedshortcode
}
/**
     * Access to SMS controller
     * @return Returns the SMS() instance
*/
func (me * YTELAPI_IMPL) SMS() sms_pkg.SMS {
    if(me.sms) == nil {
        me.sms = sms_pkg.NewSMS(me.config)
    }
    return me.sms
}
/**
     * Access to Voice controller
     * @return Returns the Voice() instance
*/
func (me * YTELAPI_IMPL) Voice() voice_pkg.VOICE {
    if(me.voice) == nil {
        me.voice = voice_pkg.NewVOICE(me.config)
    }
    return me.voice
}
